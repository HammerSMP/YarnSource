/*
 * Decompiled with CFR 0.149.
 * 
 * Could not load the following classes:
 *  com.google.common.collect.ImmutableList
 *  com.google.common.collect.ImmutableSet
 */
package net.minecraft.world.gen.feature;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import java.util.OptionalInt;
import java.util.Set;
import java.util.function.Supplier;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.MushroomBlock;
import net.minecraft.block.SweetBerryBushBlock;
import net.minecraft.fluid.FluidState;
import net.minecraft.fluid.Fluids;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.registry.BuiltinRegistries;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.Heightmap;
import net.minecraft.world.gen.CountConfig;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.ProbabilityConfig;
import net.minecraft.world.gen.UniformIntDistribution;
import net.minecraft.world.gen.decorator.CarvingMaskDecoratorConfig;
import net.minecraft.world.gen.decorator.ChanceDecoratorConfig;
import net.minecraft.world.gen.decorator.ConfiguredDecorator;
import net.minecraft.world.gen.decorator.CountExtraDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseBiasedDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseDecoratorConfig;
import net.minecraft.world.gen.decorator.Decorator;
import net.minecraft.world.gen.decorator.DecoratorConfig;
import net.minecraft.world.gen.decorator.DepthAverageDecoratorConfig;
import net.minecraft.world.gen.decorator.NopeDecoratorConfig;
import net.minecraft.world.gen.decorator.RangeDecoratorConfig;
import net.minecraft.world.gen.feature.BasaltColumnsFeatureConfig;
import net.minecraft.world.gen.feature.BlockPileFeatureConfig;
import net.minecraft.world.gen.feature.ConfiguredFeature;
import net.minecraft.world.gen.feature.DeltaFeatureConfig;
import net.minecraft.world.gen.feature.DiskFeatureConfig;
import net.minecraft.world.gen.feature.EmeraldOreFeatureConfig;
import net.minecraft.world.gen.feature.EndGatewayFeatureConfig;
import net.minecraft.world.gen.feature.EndSpikeFeature;
import net.minecraft.world.gen.feature.EndSpikeFeatureConfig;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.FeatureConfig;
import net.minecraft.world.gen.feature.HugeFungusFeatureConfig;
import net.minecraft.world.gen.feature.HugeMushroomFeatureConfig;
import net.minecraft.world.gen.feature.JungleFoliagePlacer;
import net.minecraft.world.gen.feature.MegaPineFoliagePlacer;
import net.minecraft.world.gen.feature.NetherrackReplaceBlobsFeatureConfig;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.feature.RandomBooleanFeatureConfig;
import net.minecraft.world.gen.feature.RandomFeatureConfig;
import net.minecraft.world.gen.feature.RandomFeatureEntry;
import net.minecraft.world.gen.feature.RandomPatchFeatureConfig;
import net.minecraft.world.gen.feature.SimpleBlockFeatureConfig;
import net.minecraft.world.gen.feature.SimpleRandomFeatureConfig;
import net.minecraft.world.gen.feature.SingleStateFeatureConfig;
import net.minecraft.world.gen.feature.SpringFeatureConfig;
import net.minecraft.world.gen.feature.TreeFeatureConfig;
import net.minecraft.world.gen.feature.size.ThreeLayersFeatureSize;
import net.minecraft.world.gen.feature.size.TwoLayersFeatureSize;
import net.minecraft.world.gen.foliage.AcaciaFoliagePlacer;
import net.minecraft.world.gen.foliage.BlobFoliagePlacer;
import net.minecraft.world.gen.foliage.BushFoliagePlacer;
import net.minecraft.world.gen.foliage.DarkOakFoliagePlacer;
import net.minecraft.world.gen.foliage.LargeOakFoliagePlacer;
import net.minecraft.world.gen.foliage.PineFoliagePlacer;
import net.minecraft.world.gen.foliage.SpruceFoliagePlacer;
import net.minecraft.world.gen.placer.ColumnPlacer;
import net.minecraft.world.gen.placer.DoublePlantPlacer;
import net.minecraft.world.gen.placer.SimpleBlockPlacer;
import net.minecraft.world.gen.stateprovider.ForestFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PillarBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PlainsFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider;
import net.minecraft.world.gen.stateprovider.WeightedBlockStateProvider;
import net.minecraft.world.gen.tree.AlterGroundTreeDecorator;
import net.minecraft.world.gen.tree.BeehiveTreeDecorator;
import net.minecraft.world.gen.tree.CocoaBeansTreeDecorator;
import net.minecraft.world.gen.tree.LeaveVineTreeDecorator;
import net.minecraft.world.gen.tree.TreeDecorator;
import net.minecraft.world.gen.tree.TrunkVineTreeDecorator;
import net.minecraft.world.gen.trunk.DarkOakTrunkPlacer;
import net.minecraft.world.gen.trunk.ForkingTrunkPlacer;
import net.minecraft.world.gen.trunk.GiantTrunkPlacer;
import net.minecraft.world.gen.trunk.LargeOakTrunkPlacer;
import net.minecraft.world.gen.trunk.MegaJungleTrunkPlacer;
import net.minecraft.world.gen.trunk.StraightTrunkPlacer;

public class ConfiguredFeatures {
    public static final ConfiguredFeature<?, ?> NOPE = ConfiguredFeatures.register("nope", Feature.NO_OP.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> END_SPIKE = ConfiguredFeatures.register("end_spike", Feature.END_SPIKE.configure(new EndSpikeFeatureConfig(false, (List<EndSpikeFeature.Spike>)ImmutableList.of(), null)));
    public static final ConfiguredFeature<?, ?> END_GATEWAY = ConfiguredFeatures.register("end_gateway", Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig(ServerWorld.END_SPAWN_POS, true)).decorate((ConfiguredDecorator)Decorator.END_GATEWAY.configure(DecoratorConfig.DEFAULT)));
    public static final ConfiguredFeature<?, ?> END_GATEWAY_DELAYED = ConfiguredFeatures.register("end_gateway_delayed", Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig()));
    public static final ConfiguredFeature<?, ?> CHORUS_PLANT = ConfiguredFeatures.register("chorus_plant", (ConfiguredFeature)Feature.CHORUS_PLANT.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.field_26165).repeatRandomly(4));
    public static final ConfiguredFeature<?, ?> END_ISLAND = ConfiguredFeatures.register("end_island", Feature.END_ISLAND.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> END_ISLAND_DECORATED = ConfiguredFeatures.register("end_island_decorated", END_ISLAND.decorate((ConfiguredDecorator)Decorator.END_ISLAND.configure(DecoratorConfig.DEFAULT)));
    public static final ConfiguredFeature<?, ?> DELTA = ConfiguredFeatures.register("delta", Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(States.LAVA_BLOCK, States.MAGMA_BLOCK, UniformIntDistribution.of(3, 4), UniformIntDistribution.of(0, 2))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(40))));
    public static final ConfiguredFeature<?, ?> SMALL_BASALT_COLUMNS = ConfiguredFeatures.register("small_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(UniformIntDistribution.of(1), UniformIntDistribution.of(1, 3))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
    public static final ConfiguredFeature<?, ?> LARGE_BASALT_COLUMNS = ConfiguredFeatures.register("large_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(UniformIntDistribution.of(2, 1), UniformIntDistribution.of(5, 5))).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(2))));
    public static final ConfiguredFeature<?, ?> BASALT_BLOBS = ConfiguredFeatures.register("basalt_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new NetherrackReplaceBlobsFeatureConfig(States.NETHERRACK, States.BASALT, UniformIntDistribution.of(3, 4))).method_30377(128)).spreadHorizontally()).repeat(75));
    public static final ConfiguredFeature<?, ?> BLACKSTONE_BLOBS = ConfiguredFeatures.register("blackstone_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new NetherrackReplaceBlobsFeatureConfig(States.NETHERRACK, States.BLACKSTONE, UniformIntDistribution.of(3, 4))).method_30377(128)).spreadHorizontally()).repeat(25));
    public static final ConfiguredFeature<?, ?> GLOWSTONE_EXTRA = ConfiguredFeatures.register("glowstone_extra", Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorator.GLOWSTONE.configure(new CountConfig(10))));
    public static final ConfiguredFeature<?, ?> GLOWSTONE = ConfiguredFeatures.register("glowstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).method_30377(128)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> CRIMSON_FOREST_VEGETATION = ConfiguredFeatures.register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(Configs.CRIMSON_ROOTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(6))));
    public static final ConfiguredFeature<?, ?> WARPED_FOREST_VEGETATION = ConfiguredFeatures.register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(Configs.WARPED_ROOTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(5))));
    public static final ConfiguredFeature<?, ?> NETHER_SPROUTS = ConfiguredFeatures.register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configure(Configs.NETHER_SPROUTS_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
    public static final ConfiguredFeature<?, ?> TWISTING_VINES = ConfiguredFeatures.register("twisting_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.TWISTING_VINES.configure(FeatureConfig.DEFAULT).method_30377(128)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> WEEPING_VINES = ConfiguredFeatures.register("weeping_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.WEEPING_VINES.configure(FeatureConfig.DEFAULT).method_30377(128)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> BASALT_PILLAR = ConfiguredFeatures.register("basalt_pillar", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BASALT_PILLAR.configure(FeatureConfig.DEFAULT).method_30377(128)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> SEAGRASS_COLD = ConfiguredFeatures.register("seagrass_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(32)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_COLD = ConfiguredFeatures.register("seagrass_deep_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(40)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_NORMAL = ConfiguredFeatures.register("seagrass_normal", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_RIVER = ConfiguredFeatures.register("seagrass_river", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.4f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP = ConfiguredFeatures.register("seagrass_deep", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(48)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_SWAMP = ConfiguredFeatures.register("seagrass_swamp", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.6f)).repeat(64)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_WARM = ConfiguredFeatures.register("seagrass_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3f)).repeat(80)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_WARM = ConfiguredFeatures.register("seagrass_deep_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8f)).repeat(80)).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> SEA_PICKLE = ConfiguredFeatures.register("sea_pickle", (ConfiguredFeature)Feature.SEA_PICKLE.configure(new CountConfig(20)).decorate((ConfiguredDecorator)Decorators.field_26167).applyChance(16));
    public static final ConfiguredFeature<?, ?> ICE_SPIKE = ConfiguredFeatures.register("ice_spike", (ConfiguredFeature)Feature.ICE_SPIKE.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(3));
    public static final ConfiguredFeature<?, ?> ICE_PATCH = ConfiguredFeatures.register("ice_patch", (ConfiguredFeature)Feature.ICE_PATCH.configure(new DiskFeatureConfig(States.PACKED_ICE, UniformIntDistribution.of(2, 1), 1, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK, (Object)States.PODZOL, (Object)States.COARSE_DIRT, (Object)States.MYCELIUM, (Object)States.SNOW_BLOCK, (Object)States.ICE))).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(2));
    public static final ConfiguredFeature<?, ?> FOREST_ROCK = ConfiguredFeatures.register("forest_rock", (ConfiguredFeature)Feature.FOREST_ROCK.configure(new SingleStateFeatureConfig(States.MOSSY_COBBLESTONE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeatRandomly(2));
    public static final ConfiguredFeature<?, ?> SEAGRASS_SIMPLE = ConfiguredFeatures.register("seagrass_simple", Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(States.SEAGRASS, (List<BlockState>)ImmutableList.of((Object)States.STONE), (List<BlockState>)ImmutableList.of((Object)States.WATER_BLOCK), (List<BlockState>)ImmutableList.of((Object)States.WATER_BLOCK))).decorate((ConfiguredDecorator)Decorator.CARVING_MASK.configure(new CarvingMaskDecoratorConfig(GenerationStep.Carver.LIQUID, 0.1f))));
    public static final ConfiguredFeature<?, ?> ICEBERG_PACKED = ConfiguredFeatures.register("iceberg_packed", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(States.PACKED_ICE)).decorate((ConfiguredDecorator)Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(16));
    public static final ConfiguredFeature<?, ?> ICEBERG_BLUE = ConfiguredFeatures.register("iceberg_blue", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(States.BLUE_ICE)).decorate((ConfiguredDecorator)Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(200));
    public static final ConfiguredFeature<?, ?> KELP_COLD = ConfiguredFeatures.register("kelp_cold", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(120, 80.0, 0.0))));
    public static final ConfiguredFeature<?, ?> KELP_WARM = ConfiguredFeatures.register("kelp_warm", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(80, 80.0, 0.0))));
    public static final ConfiguredFeature<?, ?> BLUE_ICE = ConfiguredFeatures.register("blue_ice", (ConfiguredFeature)((ConfiguredFeature)Feature.BLUE_ICE.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorator.RANGE.configure(new RangeDecoratorConfig(30, 32, 64))).spreadHorizontally()).repeatRandomly(19));
    public static final ConfiguredFeature<?, ?> BAMBOO_LIGHT = ConfiguredFeatures.register("bamboo_light", (ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.0f)).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(16));
    public static final ConfiguredFeature<?, ?> BAMBOO = ConfiguredFeatures.register("bamboo", ((ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.2f)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP_WORLD_SURFACE).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(160, 80.0, 0.3))));
    public static final ConfiguredFeature<?, ?> VINES = ConfiguredFeatures.register("vines", (ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> LAKE_WATER = ConfiguredFeatures.register("lake_water", Feature.LAKE.configure(new SingleStateFeatureConfig(States.WATER_BLOCK)).decorate((ConfiguredDecorator)Decorator.WATER_LAKE.configure(new ChanceDecoratorConfig(4))));
    public static final ConfiguredFeature<?, ?> LAKE_LAVA = ConfiguredFeatures.register("lake_lava", Feature.LAKE.configure(new SingleStateFeatureConfig(States.LAVA_BLOCK)).decorate((ConfiguredDecorator)Decorator.LAVA_LAKE.configure(new ChanceDecoratorConfig(80))));
    public static final ConfiguredFeature<?, ?> DISK_CLAY = ConfiguredFeatures.register("disk_clay", Feature.DISK.configure(new DiskFeatureConfig(States.CLAY, UniformIntDistribution.of(2, 1), 1, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.CLAY))).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> DISK_GRAVEL = ConfiguredFeatures.register("disk_gravel", Feature.DISK.configure(new DiskFeatureConfig(States.GRAVEL, UniformIntDistribution.of(2, 3), 2, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK))).decorate((ConfiguredDecorator)Decorators.field_26167));
    public static final ConfiguredFeature<?, ?> DISK_SAND = ConfiguredFeatures.register("disk_sand", (ConfiguredFeature)Feature.DISK.configure(new DiskFeatureConfig(States.SAND, UniformIntDistribution.of(2, 4), 2, (List<BlockState>)ImmutableList.of((Object)States.DIRT, (Object)States.GRASS_BLOCK))).decorate((ConfiguredDecorator)Decorators.field_26167).repeat(3));
    public static final ConfiguredFeature<?, ?> FREEZE_TOP_LAYER = ConfiguredFeatures.register("freeze_top_layer", Feature.FREEZE_TOP_LAYER.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> BONUS_CHEST = ConfiguredFeatures.register("bonus_chest", Feature.BONUS_CHEST.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> VOID_START_PLATFORM = ConfiguredFeatures.register("void_start_platform", Feature.VOID_START_PLATFORM.configure(FeatureConfig.DEFAULT));
    public static final ConfiguredFeature<?, ?> MONSTER_ROOM = ConfiguredFeatures.register("monster_room", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.MONSTER_ROOM.configure(FeatureConfig.DEFAULT).method_30377(256)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> DESERT_WELL = ConfiguredFeatures.register("desert_well", (ConfiguredFeature)Feature.DESERT_WELL.configure(FeatureConfig.DEFAULT).decorate((ConfiguredDecorator)Decorators.field_26165).applyChance(1000));
    public static final ConfiguredFeature<?, ?> FOSSIL = ConfiguredFeatures.register("fossil", (ConfiguredFeature)Feature.FOSSIL.configure(FeatureConfig.DEFAULT).applyChance(64));
    public static final ConfiguredFeature<?, ?> SPRING_LAVA_DOUBLE = ConfiguredFeatures.register("spring_lava_double", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.LAVA_SPRING_CONFIG).decorate((ConfiguredDecorator)Decorator.RANGE_VERY_BIASED.configure(new RangeDecoratorConfig(8, 16, 256))).spreadHorizontally()).repeat(40));
    public static final ConfiguredFeature<?, ?> SPRING_LAVA = ConfiguredFeatures.register("spring_lava", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.LAVA_SPRING_CONFIG).decorate((ConfiguredDecorator)Decorator.RANGE_VERY_BIASED.configure(new RangeDecoratorConfig(8, 16, 256))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> SPRING_DELTA = ConfiguredFeatures.register("spring_delta", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.LAVA_FLUID, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK, (Object)Blocks.SOUL_SAND, (Object)Blocks.GRAVEL, (Object)Blocks.MAGMA_BLOCK, (Object)Blocks.BLACKSTONE))).decorate((ConfiguredDecorator)Decorators.NETHER_SPRING).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED = ConfiguredFeatures.register("spring_closed", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.ENCLOSED_NETHER_SPRING_CONFIG).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED_DOUBLE = ConfiguredFeatures.register("spring_closed_double", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(Configs.ENCLOSED_NETHER_SPRING_CONFIG).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(32));
    public static final ConfiguredFeature<?, ?> SPRING_OPEN = ConfiguredFeatures.register("spring_open", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.LAVA_FLUID, false, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK))).decorate((ConfiguredDecorator)Decorators.NETHER_SPRING).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> SPRING_WATER = ConfiguredFeatures.register("spring_water", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(States.WATER_FLUID, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE))).decorate((ConfiguredDecorator)Decorator.RANGE_BIASED.configure(new RangeDecoratorConfig(8, 8, 256))).spreadHorizontally()).repeat(50));
    public static final ConfiguredFeature<?, ?> PILE_HAY = ConfiguredFeatures.register("pile_hay", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new PillarBlockStateProvider(Blocks.HAY_BLOCK))));
    public static final ConfiguredFeature<?, ?> PILE_MELON = ConfiguredFeatures.register("pile_melon", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.MELON))));
    public static final ConfiguredFeature<?, ?> PILE_SNOW = ConfiguredFeatures.register("pile_snow", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.SNOW))));
    public static final ConfiguredFeature<?, ?> PILE_ICE = ConfiguredFeatures.register("pile_ice", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider().addState(States.BLUE_ICE, 1).addState(States.PACKED_ICE, 5))));
    public static final ConfiguredFeature<?, ?> PILE_PUMPKIN = ConfiguredFeatures.register("pile_pumpkin", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider().addState(States.PUMPKIN, 19).addState(States.JACK_O_LANTERN, 1))));
    public static final ConfiguredFeature<?, ?> PATCH_FIRE = ConfiguredFeatures.register("patch_fire", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.FIRE), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.NETHERRACK.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.FIRE));
    public static final ConfiguredFeature<?, ?> PATCH_SOUL_FIRE = ConfiguredFeatures.register("patch_soul_fire", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SOUL_FIRE), new SimpleBlockPlacer()).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.SOUL_SOIL.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.FIRE));
    public static final ConfiguredFeature<?, ?> PATCH_BROWN_MUSHROOM = ConfiguredFeatures.register("patch_brown_mushroom", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_RED_MUSHROOM = ConfiguredFeatures.register("patch_red_mushroom", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_CRIMSON_ROOTS = ConfiguredFeatures.register("patch_crimson_roots", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.CRIMSON_ROOTS), new SimpleBlockPlacer()).tries(64).cannotProject().build()).method_30377(128));
    public static final ConfiguredFeature<?, ?> PATCH_SUNFLOWER = ConfiguredFeatures.register("patch_sunflower", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SUNFLOWER), new DoublePlantPlacer()).tries(64).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(10));
    public static final ConfiguredFeature<?, ?> PATCH_PUMPKIN = ConfiguredFeatures.register("patch_pumpkin", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.PUMPKIN), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.field_26166).applyChance(32));
    public static final ConfiguredFeature<?, ?> PATCH_TAIGA_GRASS = ConfiguredFeatures.register("patch_taiga_grass", Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_BUSH = ConfiguredFeatures.register("patch_berry_bush", Feature.RANDOM_PATCH.configure(Configs.SWEET_BERRY_BUSH_CONFIG));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_PLAIN = ConfiguredFeatures.register("patch_grass_plain", ((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166)).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 5, 10))));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_FOREST = ConfiguredFeatures.register("patch_grass_forest", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(2));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_BADLANDS = ConfiguredFeatures.register("patch_grass_badlands", Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_SAVANNA = ConfiguredFeatures.register("patch_grass_savanna", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_NORMAL = ConfiguredFeatures.register("patch_grass_normal", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(5));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA_2 = ConfiguredFeatures.register("patch_grass_taiga_2", Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA = ConfiguredFeatures.register("patch_grass_taiga", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TAIGA_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_JUNGLE = ConfiguredFeatures.register("patch_grass_jungle", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.LUSH_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(25));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_2 = ConfiguredFeatures.register("patch_dead_bush_2", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(2));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH = ConfiguredFeatures.register("patch_dead_bush", Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_BADLANDS = ConfiguredFeatures.register("patch_dead_bush_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.DEAD_BUSH_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_MELON = ConfiguredFeatures.register("patch_melon", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.MELON), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).canReplace().cannotProject().build()).decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_SPARSE = ConfiguredFeatures.register("patch_berry_sparse", PATCH_BERRY_BUSH.decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_DECORATED = ConfiguredFeatures.register("patch_berry_decorated", (ConfiguredFeature)PATCH_BERRY_BUSH.decorate((ConfiguredDecorator)Decorators.field_26166).applyChance(12));
    public static final ConfiguredFeature<?, ?> PATCH_WATERLILLY = ConfiguredFeatures.register("patch_waterlilly", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILY_PAD), SimpleBlockPlacer.INSTANCE).tries(10).build()).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(4));
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS_2 = ConfiguredFeatures.register("patch_tall_grass_2", ((ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TALL_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 0, 7))));
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS = ConfiguredFeatures.register("patch_tall_grass", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.TALL_GRASS_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_LARGE_FERN = ConfiguredFeatures.register("patch_large_fern", (ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LARGE_FERN), new DoublePlantPlacer()).tries(64).cannotProject().build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(7));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS = ConfiguredFeatures.register("patch_cactus", Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.CACTUS), new ColumnPlacer(1, 2)).tries(10).cannotProject().build()));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DESERT = ConfiguredFeatures.register("patch_cactus_desert", (ConfiguredFeature)PATCH_CACTUS.decorate((ConfiguredDecorator)Decorators.field_26166).repeat(10));
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DECORATED = ConfiguredFeatures.register("patch_cactus_decorated", (ConfiguredFeature)PATCH_CACTUS.decorate((ConfiguredDecorator)Decorators.field_26166).repeat(5));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_SWAMP = ConfiguredFeatures.register("patch_sugar_cane_swamp", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(20));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_DESERT = ConfiguredFeatures.register("patch_sugar_cane_desert", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(60));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_BADLANDS = ConfiguredFeatures.register("patch_sugar_cane_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(13));
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE = ConfiguredFeatures.register("patch_sugar_cane", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(Configs.SUGAR_CANE_CONFIG).decorate((ConfiguredDecorator)Decorators.field_26166).repeat(10));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NETHER = ConfiguredFeatures.register("brown_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_BROWN_MUSHROOM.method_30377(128)).applyChance(2));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NETHER = ConfiguredFeatures.register("red_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_RED_MUSHROOM.method_30377(128)).applyChance(2));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NORMAL = ConfiguredFeatures.register("brown_mushroom_normal", (ConfiguredFeature)PATCH_BROWN_MUSHROOM.decorate((ConfiguredDecorator)Decorators.field_26166).applyChance(4));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NORMAL = ConfiguredFeatures.register("red_mushroom_normal", (ConfiguredFeature)PATCH_RED_MUSHROOM.decorate((ConfiguredDecorator)Decorators.field_26166).applyChance(8));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_TAIGA = ConfiguredFeatures.register("brown_mushroom_taiga", ((ConfiguredFeature)PATCH_BROWN_MUSHROOM.applyChance(4)).decorate((ConfiguredDecorator)Decorators.field_26165));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_TAIGA = ConfiguredFeatures.register("red_mushroom_taiga", ((ConfiguredFeature)PATCH_RED_MUSHROOM.applyChance(8)).decorate((ConfiguredDecorator)Decorators.field_26166));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_GIANT = ConfiguredFeatures.register("brown_mushroom_giant", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(3));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_GIANT = ConfiguredFeatures.register("red_mushroom_giant", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(3));
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_SWAMP = ConfiguredFeatures.register("brown_mushroom_swamp", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(8));
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_SWAMP = ConfiguredFeatures.register("red_mushroom_swamp", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(8));
    public static final ConfiguredFeature<?, ?> ORE_MAGMA = ConfiguredFeatures.register("ore_magma", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.MAGMA_BLOCK, 33)).decorate((ConfiguredDecorator)Decorator.MAGMA.configure(NopeDecoratorConfig.INSTANCE)).spreadHorizontally()).repeat(4));
    public static final ConfiguredFeature<?, ?> ORE_SOUL_SAND = ConfiguredFeatures.register("ore_soul_sand", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.SOUL_SAND, 12)).method_30377(32)).spreadHorizontally()).repeat(12));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_DELTAS = ConfiguredFeatures.register("ore_gold_deltas", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_GOLD_ORE, 10)).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_DELTAS = ConfiguredFeatures.register("ore_quartz_deltas", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(32));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_NETHER = ConfiguredFeatures.register("ore_gold_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_GOLD_ORE, 10)).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_NETHER = ConfiguredFeatures.register("ore_quartz_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorate((ConfiguredDecorator)Decorators.NETHER_ORE).spreadHorizontally()).repeat(16));
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL_NETHER = ConfiguredFeatures.register("ore_gravel_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.GRAVEL, 33)).decorate((ConfiguredDecorator)Decorator.RANGE.configure(new RangeDecoratorConfig(5, 0, 37))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_BLACKSTONE = ConfiguredFeatures.register("ore_blackstone", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, States.BLACKSTONE, 33)).decorate((ConfiguredDecorator)Decorator.RANGE.configure(new RangeDecoratorConfig(5, 10, 37))).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_DIRT = ConfiguredFeatures.register("ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIRT, 33)).method_30377(256)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL = ConfiguredFeatures.register("ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRAVEL, 33)).method_30377(256)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> ORE_GRANITE = ConfiguredFeatures.register("ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GRANITE, 33)).method_30377(80)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_DIORITE = ConfiguredFeatures.register("ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIORITE, 33)).method_30377(80)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_ANDESITE = ConfiguredFeatures.register("ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.ANDESITE, 33)).method_30377(80)).spreadHorizontally()).repeat(10));
    public static final ConfiguredFeature<?, ?> ORE_COAL = ConfiguredFeatures.register("ore_coal", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.COAL_ORE, 17)).method_30377(128)).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_IRON = ConfiguredFeatures.register("ore_iron", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.IRON_ORE, 9)).method_30377(64)).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_GOLD_EXTRA = ConfiguredFeatures.register("ore_gold_extra", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GOLD_ORE, 9)).decorate((ConfiguredDecorator)Decorator.RANGE.configure(new RangeDecoratorConfig(32, 32, 80))).spreadHorizontally()).repeat(20));
    public static final ConfiguredFeature<?, ?> ORE_GOLD = ConfiguredFeatures.register("ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.GOLD_ORE, 9)).method_30377(32)).spreadHorizontally()).repeat(2));
    public static final ConfiguredFeature<?, ?> ORE_REDSTONE = ConfiguredFeatures.register("ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.REDSTONE_ORE, 8)).method_30377(16)).spreadHorizontally()).repeat(8));
    public static final ConfiguredFeature<?, ?> ORE_DIAMOND = ConfiguredFeatures.register("ore_diamond", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.DIAMOND_ORE, 8)).method_30377(16)).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> ORE_LAPIS = ConfiguredFeatures.register("ore_lapis", (ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.LAPIS_ORE, 7)).decorate((ConfiguredDecorator)Decorator.DEPTH_AVERAGE.configure(new DepthAverageDecoratorConfig(16, 16))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> ORE_INFESTED = ConfiguredFeatures.register("ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, States.INFESTED_STONE, 9)).method_30377(64)).spreadHorizontally()).repeat(7));
    public static final ConfiguredFeature<?, ?> ORE_EMERALD = ConfiguredFeatures.register("ore_emerald", Feature.EMERALD_ORE.configure(new EmeraldOreFeatureConfig(States.STONE, States.EMERALD_ORE)).decorate((ConfiguredDecorator)Decorator.EMERALD_ORE.configure(DecoratorConfig.DEFAULT)));
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_LARGE = ConfiguredFeatures.register("ore_debris_large", (ConfiguredFeature)Feature.NO_SURFACE_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, States.ANCIENT_DEBRIS, 3)).decorate((ConfiguredDecorator)Decorator.DEPTH_AVERAGE.configure(new DepthAverageDecoratorConfig(16, 8))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_SMALL = ConfiguredFeatures.register("ore_debris_small", (ConfiguredFeature)Feature.NO_SURFACE_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, States.ANCIENT_DEBRIS, 2)).decorate((ConfiguredDecorator)Decorator.RANGE.configure(new RangeDecoratorConfig(8, 16, 128))).spreadHorizontally());
    public static final ConfiguredFeature<?, ?> CRIMSON_FUNGI = ConfiguredFeatures.register("crimson_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_NOT_PLANTED_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
    public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> CRIMSON_FUNGI_PLANTED = ConfiguredFeatures.register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_CONFIG));
    public static final ConfiguredFeature<?, ?> WARPED_FUNGI = ConfiguredFeatures.register("warped_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_NOT_PLANTED_CONFIG).decorate((ConfiguredDecorator)Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
    public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> WARPED_FUNGI_PLANTED = ConfiguredFeatures.register("warped_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_CONFIG));
    public static final ConfiguredFeature<?, ?> HUGE_BROWN_MUSHROOM = ConfiguredFeatures.register("huge_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(States.BROWN_MUSHROOM_BLOCK), new SimpleBlockStateProvider(States.MUSHROOM_STEM), 3)));
    public static final ConfiguredFeature<?, ?> HUGE_RED_MUSHROOM = ConfiguredFeatures.register("huge_red_mushroom", Feature.HUGE_RED_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(States.RED_MUSHROOM_BLOCK), new SimpleBlockStateProvider(States.MUSHROOM_STEM), 2)));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK = ConfiguredFeatures.register("oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new SimpleBlockStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(4, 2, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> DARK_OAK = ConfiguredFeatures.register("dark_oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.DARK_OAK_LOG), new SimpleBlockStateProvider(States.DARK_OAK_LEAVES), new DarkOakFoliagePlacer(UniformIntDistribution.of(0), UniformIntDistribution.of(0)), new DarkOakTrunkPlacer(6, 2, 1), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).maxWaterDepth(Integer.MAX_VALUE).heightmap(Heightmap.Type.MOTION_BLOCKING).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH = ConfiguredFeatures.register("birch", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.BIRCH_LOG), new SimpleBlockStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(5, 2, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> ACACIA = ConfiguredFeatures.register("acacia", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.ACACIA_LOG), new SimpleBlockStateProvider(States.ACACIA_LEAVES), new AcaciaFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0)), new ForkingTrunkPlacer(5, 2, 2), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> SPRUCE = ConfiguredFeatures.register("spruce", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new SpruceFoliagePlacer(UniformIntDistribution.of(2, 1), UniformIntDistribution.of(0, 2), UniformIntDistribution.of(1, 1)), new StraightTrunkPlacer(5, 2, 1), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> PINE = ConfiguredFeatures.register("pine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new PineFoliagePlacer(UniformIntDistribution.of(1), UniformIntDistribution.of(1), UniformIntDistribution.of(3, 1)), new StraightTrunkPlacer(6, 4, 0), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE = ConfiguredFeatures.register("jungle_tree", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new CocoaBeansTreeDecorator(0.2f), (Object)TrunkVineTreeDecorator.INSTANCE, (Object)LeaveVineTreeDecorator.INSTANCE)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK = ConfiguredFeatures.register("fancy_oak", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new SimpleBlockStateProvider(States.OAK_LEAVES), new LargeOakFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(4), 4), new LargeOakTrunkPlacer(3, 11, 0), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().heightmap(Heightmap.Type.MOTION_BLOCKING).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE_NO_VINE = ConfiguredFeatures.register("jungle_tree_no_vine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_JUNGLE_TREE = ConfiguredFeatures.register("mega_jungle_tree", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new SimpleBlockStateProvider(States.JUNGLE_LEAVES), new JungleFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)TrunkVineTreeDecorator.INSTANCE, (Object)LeaveVineTreeDecorator.INSTANCE)).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_SPRUCE = ConfiguredFeatures.register("mega_spruce", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformIntDistribution.of(0), UniformIntDistribution.of(0), UniformIntDistribution.of(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new AlterGroundTreeDecorator(new SimpleBlockStateProvider(States.PODZOL)))).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_PINE = ConfiguredFeatures.register("mega_pine", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.SPRUCE_LOG), new SimpleBlockStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformIntDistribution.of(0), UniformIntDistribution.of(0), UniformIntDistribution.of(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of((Object)new AlterGroundTreeDecorator(new SimpleBlockStateProvider(States.PODZOL)))).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> SUPER_BIRCH_BEES_0002 = ConfiguredFeatures.register("super_birch_bees_0002", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.BIRCH_LOG), new SimpleBlockStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().decorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.VERY_RARE_BEEHIVES_TREES)).build()));
    public static final ConfiguredFeature<?, ?> SWAMP_TREE = ConfiguredFeatures.register("swamp_tree", ((ConfiguredFeature)Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.OAK_LOG), new SimpleBlockStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformIntDistribution.of(3), UniformIntDistribution.of(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1)).maxWaterDepth(1).decorators((List<TreeDecorator>)ImmutableList.of((Object)LeaveVineTreeDecorator.INSTANCE)).build()).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> JUNGLE_BUSH = ConfiguredFeatures.register("jungle_bush", Feature.TREE.configure(new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(States.JUNGLE_LOG), new SimpleBlockStateProvider(States.OAK_LEAVES), new BushFoliagePlacer(UniformIntDistribution.of(2), UniformIntDistribution.of(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayersFeatureSize(0, 0, 0)).heightmap(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).build()));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_0002 = ConfiguredFeatures.register("oak_bees_0002", Feature.TREE.configure(OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_002 = ConfiguredFeatures.register("oak_bees_002", Feature.TREE.configure(OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_005 = ConfiguredFeatures.register("oak_bees_005", Feature.TREE.configure(OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_0002 = ConfiguredFeatures.register("birch_bees_0002", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_002 = ConfiguredFeatures.register("birch_bees_002", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_005 = ConfiguredFeatures.register("birch_bees_005", Feature.TREE.configure(BIRCH.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_0002 = ConfiguredFeatures.register("fancy_oak_bees_0002", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.VERY_RARE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_002 = ConfiguredFeatures.register("fancy_oak_bees_002", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.REGULAR_BEEHIVES_TREES))));
    public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_005 = ConfiguredFeatures.register("fancy_oak_bees_005", Feature.TREE.configure(FANCY_OAK.getConfig().setTreeDecorators((List<TreeDecorator>)ImmutableList.of((Object)Decorators.MORE_BEEHIVES_TREES))));
    public static final ConfiguredFeature<?, ?> OAK_BADLANDS = ConfiguredFeatures.register("oak_badlands", ((ConfiguredFeature)OAK.decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(5, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> SPRUCE_SNOWY = ConfiguredFeatures.register("spruce_snowy", ((ConfiguredFeature)SPRUCE.decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> FLOWER_WARM = ConfiguredFeatures.register("flower_warm", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(Configs.DEFAULT_FLOWER_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(4));
    public static final ConfiguredFeature<?, ?> FLOWER_DEFAULT = ConfiguredFeatures.register("flower_default", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(Configs.DEFAULT_FLOWER_CONFIG).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(2));
    public static final ConfiguredFeature<?, ?> FLOWER_FOREST = ConfiguredFeatures.register("flower_forest", (ConfiguredFeature)((ConfiguredFeature)Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(ForestFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(100));
    public static final ConfiguredFeature<?, ?> FLOWER_SWAMP = ConfiguredFeatures.register("flower_swamp", ((ConfiguredFeature)Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE).tries(64).build()).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165));
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN = ConfiguredFeatures.register("flower_plain", Feature.FLOWER.configure(new RandomPatchFeatureConfig.Builder(PlainsFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()));
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN_DECORATED = ConfiguredFeatures.register("flower_plain_decorated", ((ConfiguredFeature)((ConfiguredFeature)FLOWER_PLAIN.decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8, 15, 4))));
    private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_VEGETATION_CONFIGS = ImmutableList.of(() -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILAC), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.ROSE_BUSH), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.RANDOM_PATCH.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.PEONY), new DoublePlantPlacer()).tries(64).cannotProject().build()), () -> Feature.field_26361.configure(new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE).tries(64).build()));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION_COMMON = ConfiguredFeatures.register("forest_flower_vegetation_common", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig((List<Supplier<ConfiguredFeature<?, ?>>>)FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(UniformIntDistribution.of(-1, 4))).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(5));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION = ConfiguredFeatures.register("forest_flower_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig((List<Supplier<ConfiguredFeature<?, ?>>>)FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(UniformIntDistribution.of(-3, 4))).decorate((ConfiguredDecorator)Decorators.SPREAD_32_ABOVE)).decorate((ConfiguredDecorator)Decorators.field_26165).repeat(5));
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_BROWN = ConfiguredFeatures.register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)HUGE_BROWN_MUSHROOM.withChance(0.025f), (Object)HUGE_RED_MUSHROOM.withChance(0.05f), (Object)DARK_OAK.withChance(0.6666667f), (Object)BIRCH.withChance(0.2f), (Object)FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorator.DARK_OAK_TREE.configure(DecoratorConfig.DEFAULT)));
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_RED = ConfiguredFeatures.register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)HUGE_RED_MUSHROOM.withChance(0.025f), (Object)HUGE_BROWN_MUSHROOM.withChance(0.05f), (Object)DARK_OAK.withChance(0.6666667f), (Object)BIRCH.withChance(0.2f), (Object)FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorator.DARK_OAK_TREE.configure(DecoratorConfig.DEFAULT)));
    public static final ConfiguredFeature<?, ?> WARM_OCEAN_VEGETATION = ConfiguredFeatures.register("warm_ocean_vegetation", ((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig((List<Supplier<ConfiguredFeature<?, ?>>>)ImmutableList.of(() -> Feature.CORAL_TREE.configure(FeatureConfig.DEFAULT), () -> Feature.CORAL_CLAW.configure(FeatureConfig.DEFAULT), () -> Feature.CORAL_MUSHROOM.configure(FeatureConfig.DEFAULT)))).decorate((ConfiguredDecorator)Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate((ConfiguredDecorator)Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(20, 400.0, 0.0))));
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_TREES = ConfiguredFeatures.register("forest_flower_trees", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)BIRCH_BEES_002.withChance(0.2f), (Object)FANCY_OAK_BEES_002.withChance(0.1f)), OAK_BEES_002)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(6, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TAIGA_VEGETATION = ConfiguredFeatures.register("taiga_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SHATTERED_SAVANNA = ConfiguredFeatures.register("trees_shattered_savanna", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)ACACIA.withChance(0.8f)), OAK)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_SAVANNA = ConfiguredFeatures.register("trees_savanna", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)ACACIA.withChance(0.8f)), OAK)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(1, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BIRCH_TALL = ConfiguredFeatures.register("birch_tall", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)SUPER_BIRCH_BEES_0002.withChance(0.5f)), BIRCH_BEES_0002)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_BIRCH = ConfiguredFeatures.register("trees_birch", ((ConfiguredFeature)BIRCH_BEES_0002.decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN_EDGE = ConfiguredFeatures.register("trees_mountain_edge", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)SPRUCE.withChance(0.666f), (Object)FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(3, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN = ConfiguredFeatures.register("trees_mountain", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)SPRUCE.withChance(0.666f), (Object)FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_WATER = ConfiguredFeatures.register("trees_water", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)FANCY_OAK.withChance(0.1f)), OAK)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BIRCH_OTHER = ConfiguredFeatures.register("birch_other", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)BIRCH_BEES_0002.withChance(0.2f), (Object)FANCY_OAK_BEES_0002.withChance(0.1f)), OAK_BEES_0002)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> PLAIN_VEGETATION = ConfiguredFeatures.register("plain_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)FANCY_OAK_BEES_005.withChance(0.33333334f)), OAK_BEES_005)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.05f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE_EDGE = ConfiguredFeatures.register("trees_jungle_edge", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)FANCY_OAK.withChance(0.1f), (Object)JUNGLE_BUSH.withChance(0.5f)), JUNGLE_TREE)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_GIANT_SPRUCE = ConfiguredFeatures.register("trees_giant_spruce", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)MEGA_SPRUCE.withChance(0.33333334f), (Object)PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_GIANT = ConfiguredFeatures.register("trees_giant", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)MEGA_SPRUCE.withChance(0.025641026f), (Object)MEGA_PINE.withChance(0.30769232f), (Object)PINE.withChance(0.33333334f)), SPRUCE)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE = ConfiguredFeatures.register("trees_jungle", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)FANCY_OAK.withChance(0.1f), (Object)JUNGLE_BUSH.withChance(0.5f), (Object)MEGA_JUNGLE_TREE.withChance(0.33333334f)), JUNGLE_TREE)).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(50, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> BAMBOO_VEGETATION = ConfiguredFeatures.register("bamboo_vegetation", ((ConfiguredFeature)Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig((List<RandomFeatureEntry>)ImmutableList.of((Object)FANCY_OAK.withChance(0.05f), (Object)JUNGLE_BUSH.withChance(0.15f), (Object)MEGA_JUNGLE_TREE.withChance(0.7f)), Feature.RANDOM_PATCH.configure(Configs.LUSH_GRASS_CONFIG))).decorate((ConfiguredDecorator)Decorators.field_26165)).decorate((ConfiguredDecorator)Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(30, 0.1f, 1))));
    public static final ConfiguredFeature<?, ?> MUSHROOM_FIELD_VEGETATION = ConfiguredFeatures.register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> HUGE_RED_MUSHROOM, () -> HUGE_BROWN_MUSHROOM)).decorate((ConfiguredDecorator)Decorators.field_26165));

    private static <FC extends FeatureConfig> ConfiguredFeature<FC, ?> register(String id, ConfiguredFeature<FC, ?> configuredFeature) {
        return Registry.register(BuiltinRegistries.CONFIGURED_FEATURE, id, configuredFeature);
    }

    public static final class Configs {
        public static final RandomPatchFeatureConfig GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.GRASS), SimpleBlockPlacer.INSTANCE).tries(32).build();
        public static final RandomPatchFeatureConfig TAIGA_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider().addState(States.GRASS, 1).addState(States.FERN, 4), SimpleBlockPlacer.INSTANCE).tries(32).build();
        public static final RandomPatchFeatureConfig LUSH_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider().addState(States.GRASS, 3).addState(States.FERN, 1), SimpleBlockPlacer.INSTANCE).blacklist((Set<BlockState>)ImmutableSet.of((Object)States.PODZOL)).tries(32).build();
        public static final RandomPatchFeatureConfig DEFAULT_FLOWER_CONFIG = new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider().addState(States.POPPY, 2).addState(States.DANDELION, 1), SimpleBlockPlacer.INSTANCE).tries(64).build();
        public static final RandomPatchFeatureConfig DEAD_BUSH_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE).tries(4).build();
        public static final RandomPatchFeatureConfig SWEET_BERRY_BUSH_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of((Object)States.GRASS_BLOCK.getBlock())).cannotProject().build();
        public static final RandomPatchFeatureConfig TALL_GRASS_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.TALL_GRASS), new DoublePlantPlacer()).tries(64).cannotProject().build();
        public static final RandomPatchFeatureConfig SUGAR_CANE_CONFIG = new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(States.SUGAR_CANE), new ColumnPlacer(2, 2)).tries(20).spreadX(4).spreadY(0).spreadZ(4).cannotProject().needsWater().build();
        public static final SpringFeatureConfig LAVA_SPRING_CONFIG = new SpringFeatureConfig(States.LAVA_FLUID, true, 4, 1, (Set<Block>)ImmutableSet.of((Object)Blocks.STONE, (Object)Blocks.GRANITE, (Object)Blocks.DIORITE, (Object)Blocks.ANDESITE));
        public static final SpringFeatureConfig ENCLOSED_NETHER_SPRING_CONFIG = new SpringFeatureConfig(States.LAVA_FLUID, false, 5, 0, (Set<Block>)ImmutableSet.of((Object)Blocks.NETHERRACK));
        public static final BlockPileFeatureConfig CRIMSON_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider().addState(States.CRIMSON_ROOTS, 87).addState(States.CRIMSON_FUNGUS, 11).addState(States.WARPED_FUNGUS, 1));
        public static final BlockPileFeatureConfig WARPED_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider().addState(States.WARPED_ROOTS, 85).addState(States.CRIMSON_ROOTS, 1).addState(States.WARPED_FUNGUS, 13).addState(States.CRIMSON_FUNGUS, 1));
        public static final BlockPileFeatureConfig NETHER_SPROUTS_CONFIG = new BlockPileFeatureConfig(new SimpleBlockStateProvider(States.NETHER_SPROUTS));
    }

    public static final class States {
        protected static final BlockState GRASS = Blocks.GRASS.getDefaultState();
        protected static final BlockState FERN = Blocks.FERN.getDefaultState();
        protected static final BlockState PODZOL = Blocks.PODZOL.getDefaultState();
        protected static final BlockState COARSE_DIRT = Blocks.COARSE_DIRT.getDefaultState();
        protected static final BlockState MYCELIUM = Blocks.MYCELIUM.getDefaultState();
        protected static final BlockState SNOW_BLOCK = Blocks.SNOW_BLOCK.getDefaultState();
        protected static final BlockState ICE = Blocks.ICE.getDefaultState();
        protected static final BlockState OAK_LOG = Blocks.OAK_LOG.getDefaultState();
        protected static final BlockState OAK_LEAVES = Blocks.OAK_LEAVES.getDefaultState();
        protected static final BlockState JUNGLE_LOG = Blocks.JUNGLE_LOG.getDefaultState();
        protected static final BlockState JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.getDefaultState();
        protected static final BlockState SPRUCE_LOG = Blocks.SPRUCE_LOG.getDefaultState();
        protected static final BlockState SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.getDefaultState();
        protected static final BlockState ACACIA_LOG = Blocks.ACACIA_LOG.getDefaultState();
        protected static final BlockState ACACIA_LEAVES = Blocks.ACACIA_LEAVES.getDefaultState();
        protected static final BlockState BIRCH_LOG = Blocks.BIRCH_LOG.getDefaultState();
        protected static final BlockState BIRCH_LEAVES = Blocks.BIRCH_LEAVES.getDefaultState();
        protected static final BlockState DARK_OAK_LOG = Blocks.DARK_OAK_LOG.getDefaultState();
        protected static final BlockState DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.getDefaultState();
        protected static final BlockState GRASS_BLOCK = Blocks.GRASS_BLOCK.getDefaultState();
        protected static final BlockState LARGE_FERN = Blocks.LARGE_FERN.getDefaultState();
        protected static final BlockState TALL_GRASS = Blocks.TALL_GRASS.getDefaultState();
        protected static final BlockState LILAC = Blocks.LILAC.getDefaultState();
        protected static final BlockState ROSE_BUSH = Blocks.ROSE_BUSH.getDefaultState();
        protected static final BlockState PEONY = Blocks.PEONY.getDefaultState();
        protected static final BlockState BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.getDefaultState();
        protected static final BlockState RED_MUSHROOM = Blocks.RED_MUSHROOM.getDefaultState();
        protected static final BlockState PACKED_ICE = Blocks.PACKED_ICE.getDefaultState();
        protected static final BlockState BLUE_ICE = Blocks.BLUE_ICE.getDefaultState();
        protected static final BlockState LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.getDefaultState();
        protected static final BlockState BLUE_ORCHID = Blocks.BLUE_ORCHID.getDefaultState();
        protected static final BlockState POPPY = Blocks.POPPY.getDefaultState();
        protected static final BlockState DANDELION = Blocks.DANDELION.getDefaultState();
        protected static final BlockState DEAD_BUSH = Blocks.DEAD_BUSH.getDefaultState();
        protected static final BlockState MELON = Blocks.MELON.getDefaultState();
        protected static final BlockState PUMPKIN = Blocks.PUMPKIN.getDefaultState();
        protected static final BlockState SWEET_BERRY_BUSH = (BlockState)Blocks.SWEET_BERRY_BUSH.getDefaultState().with(SweetBerryBushBlock.AGE, 3);
        protected static final BlockState FIRE = Blocks.FIRE.getDefaultState();
        protected static final BlockState SOUL_FIRE = Blocks.SOUL_FIRE.getDefaultState();
        protected static final BlockState NETHERRACK = Blocks.NETHERRACK.getDefaultState();
        protected static final BlockState SOUL_SOIL = Blocks.SOUL_SOIL.getDefaultState();
        protected static final BlockState CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.getDefaultState();
        protected static final BlockState LILY_PAD = Blocks.LILY_PAD.getDefaultState();
        protected static final BlockState SNOW = Blocks.SNOW.getDefaultState();
        protected static final BlockState JACK_O_LANTERN = Blocks.JACK_O_LANTERN.getDefaultState();
        protected static final BlockState SUNFLOWER = Blocks.SUNFLOWER.getDefaultState();
        protected static final BlockState CACTUS = Blocks.CACTUS.getDefaultState();
        protected static final BlockState SUGAR_CANE = Blocks.SUGAR_CANE.getDefaultState();
        protected static final BlockState RED_MUSHROOM_BLOCK = (BlockState)Blocks.RED_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.DOWN, false);
        protected static final BlockState BROWN_MUSHROOM_BLOCK = (BlockState)((BlockState)Blocks.BROWN_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.UP, true)).with(MushroomBlock.DOWN, false);
        protected static final BlockState MUSHROOM_STEM = (BlockState)((BlockState)Blocks.MUSHROOM_STEM.getDefaultState().with(MushroomBlock.UP, false)).with(MushroomBlock.DOWN, false);
        protected static final FluidState WATER_FLUID = Fluids.WATER.getDefaultState();
        protected static final FluidState LAVA_FLUID = Fluids.LAVA.getDefaultState();
        protected static final BlockState WATER_BLOCK = Blocks.WATER.getDefaultState();
        protected static final BlockState LAVA_BLOCK = Blocks.LAVA.getDefaultState();
        protected static final BlockState DIRT = Blocks.DIRT.getDefaultState();
        protected static final BlockState GRAVEL = Blocks.GRAVEL.getDefaultState();
        protected static final BlockState GRANITE = Blocks.GRANITE.getDefaultState();
        protected static final BlockState DIORITE = Blocks.DIORITE.getDefaultState();
        protected static final BlockState ANDESITE = Blocks.ANDESITE.getDefaultState();
        protected static final BlockState COAL_ORE = Blocks.COAL_ORE.getDefaultState();
        protected static final BlockState IRON_ORE = Blocks.IRON_ORE.getDefaultState();
        protected static final BlockState GOLD_ORE = Blocks.GOLD_ORE.getDefaultState();
        protected static final BlockState REDSTONE_ORE = Blocks.REDSTONE_ORE.getDefaultState();
        protected static final BlockState DIAMOND_ORE = Blocks.DIAMOND_ORE.getDefaultState();
        protected static final BlockState LAPIS_ORE = Blocks.LAPIS_ORE.getDefaultState();
        protected static final BlockState STONE = Blocks.STONE.getDefaultState();
        protected static final BlockState EMERALD_ORE = Blocks.EMERALD_ORE.getDefaultState();
        protected static final BlockState INFESTED_STONE = Blocks.INFESTED_STONE.getDefaultState();
        protected static final BlockState SAND = Blocks.SAND.getDefaultState();
        protected static final BlockState CLAY = Blocks.CLAY.getDefaultState();
        protected static final BlockState MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.getDefaultState();
        protected static final BlockState SEAGRASS = Blocks.SEAGRASS.getDefaultState();
        protected static final BlockState MAGMA_BLOCK = Blocks.MAGMA_BLOCK.getDefaultState();
        protected static final BlockState SOUL_SAND = Blocks.SOUL_SAND.getDefaultState();
        protected static final BlockState NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.getDefaultState();
        protected static final BlockState NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.getDefaultState();
        protected static final BlockState BLACKSTONE = Blocks.BLACKSTONE.getDefaultState();
        protected static final BlockState ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.getDefaultState();
        protected static final BlockState BASALT = Blocks.BASALT.getDefaultState();
        protected static final BlockState CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.getDefaultState();
        protected static final BlockState WARPED_FUNGUS = Blocks.WARPED_FUNGUS.getDefaultState();
        protected static final BlockState WARPED_ROOTS = Blocks.WARPED_ROOTS.getDefaultState();
        protected static final BlockState NETHER_SPROUTS = Blocks.NETHER_SPROUTS.getDefaultState();
    }

    public static final class Decorators {
        public static final BeehiveTreeDecorator VERY_RARE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.002f);
        public static final BeehiveTreeDecorator REGULAR_BEEHIVES_TREES = new BeehiveTreeDecorator(0.02f);
        public static final BeehiveTreeDecorator MORE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.05f);
        public static final ConfiguredDecorator<CountConfig> FIRE = Decorator.FIRE.configure(new CountConfig(10));
        public static final ConfiguredDecorator<NopeDecoratorConfig> HEIGHTMAP = Decorator.HEIGHTMAP.configure(DecoratorConfig.DEFAULT);
        public static final ConfiguredDecorator<NopeDecoratorConfig> TOP_SOLID_HEIGHTMAP = Decorator.TOP_SOLID_HEIGHTMAP.configure(DecoratorConfig.DEFAULT);
        public static final ConfiguredDecorator<NopeDecoratorConfig> HEIGHTMAP_WORLD_SURFACE = Decorator.HEIGHTMAP_WORLD_SURFACE.configure(DecoratorConfig.DEFAULT);
        public static final ConfiguredDecorator<NopeDecoratorConfig> HEIGHTMAP_SPREAD_DOUBLE = Decorator.HEIGHTMAP_SPREAD_DOUBLE.configure(DecoratorConfig.DEFAULT);
        public static final ConfiguredDecorator<RangeDecoratorConfig> NETHER_ORE = Decorator.RANGE.configure(new RangeDecoratorConfig(10, 20, 128));
        public static final ConfiguredDecorator<RangeDecoratorConfig> NETHER_SPRING = Decorator.RANGE.configure(new RangeDecoratorConfig(4, 8, 128));
        public static final ConfiguredDecorator<?> SPREAD_32_ABOVE = Decorator.SPREAD_32_ABOVE.configure(NopeDecoratorConfig.INSTANCE);
        public static final ConfiguredDecorator<?> field_26165 = (ConfiguredDecorator)HEIGHTMAP.spreadHorizontally();
        public static final ConfiguredDecorator<?> field_26166 = (ConfiguredDecorator)HEIGHTMAP_SPREAD_DOUBLE.spreadHorizontally();
        public static final ConfiguredDecorator<?> field_26167 = (ConfiguredDecorator)TOP_SOLID_HEIGHTMAP.spreadHorizontally();
    }
}

